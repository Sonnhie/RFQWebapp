<?php
    // Include the user model
    include_once './backend/Model/usermodel.php';
    // Include the database connection
    include_once './database/dbconnection.php';
    // Create a new instance of the database connection
    require __DIR__ . '/../../vendor/autoload.php';
    require __DIR__ . '/../../vendor/phpmailer/phpmailer/src/PHPMailer.php';
    require __DIR__ . '/../../vendor/phpmailer/phpmailer/src/SMTP.php';
    require __DIR__ . '/../../vendor/phpmailer/phpmailer/src/Exception.php';
    

    use PHPMailer\PHPMailer\PHPMailer;
    use PHPMailer\PHPMailer\Exception;
    use Dotenv\Dotenv;

    $dotenv = Dotenv::createImmutable(__DIR__ . '/../../');
    $dotenv->load();

    $database = new DBConnection();
    $db = $database->getConnection();

    class RequestManagement{
        private $request_table = 'request_table';
        private $attachment_table = 'attachment_table';
        private $requeststatus_table = 'requeststatus_table';
        private $email_table = 'email_table';
        private $requestLogs_table = 'request_logs_table';
        private $comparison_table = 'comparison_table';
        private $conn;

        public function __construct($db){
            $this->conn = $db;
        }

        // Function to create a autogenerated RFQ number
        public function createRFQNumber(){

            $date = date('Ym');
            $currentMonth = date('Ym');

            $query = "select control_number, created_at 
                    from " . $this->request_table . "
                    where DATE_FORMAT(created_at, '%Y%m') = '$currentMonth' 
                    order by created_at desc 
                    limit 1";
            $lastId = 0;
            $stmt = $this->conn->prepare($query);
            $stmt->execute();
            $rowcount = $stmt->rowCount();

            if ($rowcount > 0){
                $result = $stmt->fetch(PDO::FETCH_ASSOC);
                $max_rfq_number = $result['control_number'];
                $lastId = isset($max_rfq_number) ? 
                intval(substr($max_rfq_number, -4)) : 0;
                $newID = $lastId + 1;
                $controlID = "RFQ-" . $date . "-" . str_pad($newID, 4, "0", STR_PAD_LEFT);
            }else {
                $controlID = "RFQ-" . $date . "-0001";
            }
            return $controlID;
        }

        // Function to create a new request
        public function CreateNewRequest($data){
           // $control_number = $this->createRFQNumber();
            
            $query = "INSERT INTO " . $this->request_table . " 
                    (control_number, item_name, item_description, item_purpose, item_quantity, item_uom, item_status, item_remarks, item_requestor, item_section) 
                    VALUES (:control_number, :item_name, :item_description, :item_purpose, :item_quantity, :item_uom, :item_status, :item_remarks, :item_requestor, :item_section)";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':control_number', $data['control_number']);
            $stmt->bindParam(':item_name', $data['item_name']);
            $stmt->bindParam(':item_description', $data['item_description']);
            $stmt->bindParam(':item_purpose', $data['item_purpose']);
            $stmt->bindParam(':item_quantity', $data['item_quantity']);
            $stmt->bindParam(':item_uom', $data['item_unit']);
            $stmt->bindParam(':item_status', $data['requestor_status']);
            $stmt->bindParam(':item_remarks', $data['item_remarks']);
            $stmt->bindParam(':item_requestor', $data['requestor_name']);
            $stmt->bindParam(':item_section', $data['requestor_section']);
            if ($stmt->execute()) {
                return true;
            } else {
                return false;
            }
        }

      public function CreateComparison($data){
            // Check if control number + item + supplier already exists
            $checkQuery = "SELECT COUNT(*) FROM {$this->comparison_table} 
                        WHERE control_number = :control_number AND item_name = :item_name AND supplier_name = :supplier_name";
            $stmt = $this->conn->prepare($checkQuery);
            $stmt->execute([
                ':control_number' => $data['control_number'],
                ':item_name'      => $data['item_name'],
                ':supplier_name'  => $data['supplier_name']
            ]);
            
            $count = $stmt->fetchColumn();

            if ($count == 0) {
                $query = "INSERT INTO {$this->comparison_table} 
                    (control_number, item_name, item_quantity, supplier_name, supplier_price, supplier_discount, total_price) 
                    VALUES (:control_number, :item_name, :item_quantity, :supplier_name, :supplier_price, :supplier_discount, :total_price)";
                $stmt = $this->conn->prepare($query);
                return $stmt->execute([
                    ':control_number'     => $data['control_number'],
                    ':item_name'          => $data['item_name'],
                    ':item_quantity'      => $data['item_quantity'],
                    ':supplier_name'      => $data['supplier_name'],
                    ':supplier_price'     => $data['supplier_price'],
                    ':supplier_discount'  => $data['supplier_discount'],
                    ':total_price'        => $data['total_price']
                ]);
            }

            // Record already exists
            return false;
        }


        public function fetchComparisonByControlNumber($control_number) {
            $query = "SELECT * FROM " . $this->comparison_table . " 
                    WHERE control_number = :control_number 
                    ORDER BY item_name ASC, supplier_name ASC"; // Optional: Order for readability
                    
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':control_number', $control_number, PDO::PARAM_STR);
            $stmt->execute();

            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        }

        public function updateComparisonRemarks($data) {
            $query = "UPDATE " . $this->comparison_table . " 
                    SET remarks = :remarks 
                    WHERE control_number = :control_number";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':remarks', $data['item_remarks']);
            $stmt->bindParam(':control_number', $data['control_number']);
            return $stmt->execute();
        }

        public function deleteComparison($id) {
            $query = "DELETE FROM " . $this->comparison_table . " WHERE control_number = :id";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':id', $id, PDO::PARAM_STR);
            return $stmt->execute();
        }

        public function CreateRequestLogs($data){
            $query = "INSERT INTO " . $this->requestLogs_table . " 
                    (control_number, status, remarks) 
                    VALUES (:control_number, :item_status, :item_remarks)";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':control_number', $data['control_number']);
            $stmt->bindParam(':item_status', $data['requestor_status']);
            $stmt->bindParam(':item_remarks', $data['item_remarks']);
            if ($stmt->execute()) {
                return true;
            } else {
                return false;
            }
        }

        //Function to upload attachments
        public function UploadAttachment($files){
            $control_number = $this->createRFQNumber();
            $query = "INSERT INTO " . $this->attachment_table . " (control_number, item_name, item_attachment) 
                    VALUES (:control_number, :item_name, :item_attachment)";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':control_number', $control_number);
            $stmt->bindParam(':item_name', $files['item_name']);
            $stmt->bindValue(':item_attachment', $files['item_attachment'], PDO::PARAM_LOB);
            if ($stmt->execute()) {
                return true;
            } else {
                return false;
            }
        }

        // Function to fetch all requests with pagination and filters
        public function fetchAllRequests($requestor_section, $from = null, $to = null, $status = null, $searchQuery = null, $page = 1, $perPage = 10) {
            $query = "SELECT * FROM " . $this->request_table;
            $conditions = [];
            $params = [];
        
            // Section filter (if not Procurement)
            $conditions[] = " item_section = :item_section";
            $params[':item_section'] = $requestor_section;
        
        
            // Date range filter
            if (!empty($from) && !empty($to)) {
                $conditions[] = "created_at BETWEEN :from AND :to";
                $params[':from'] = $from;
                $params[':to'] = $to;
            }
        
            // Status filter
            if (!empty($status)) {
                $conditions[] = "item_status = :item_status";
                $params[':item_status'] = $status;
            }
        
            // Search filter
            if (!empty($searchQuery)) {
                $conditions[] = "(item_name LIKE :searchQuery OR item_description LIKE :searchQuery)";
                $params[':searchQuery'] = '%' . $searchQuery . '%';
            }
        
            // Apply WHERE clause
            if (!empty($conditions)) {
                $query .= " WHERE " . implode(' AND ', $conditions);
            }
        
            // Order by newest first
            $query .= " ORDER BY created_at DESC";
        
            // Pagination using LIMIT and OFFSET
            $offset = ($page - 1) * $perPage;
            $query .= " LIMIT :limit OFFSET :offset";
        
            // Prepare and bind
            $stmt = $this->conn->prepare($query);
        
            // Bind dynamic parameters
            foreach ($params as $key => $value) {
                $stmt->bindValue($key, $value);
            }
        
            // Bind LIMIT and OFFSET (must be integers)
            $stmt->bindValue(':limit', (int)$perPage, PDO::PARAM_INT);
            $stmt->bindValue(':offset', (int)$offset, PDO::PARAM_INT);
        
            $stmt->execute();
        
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        }
        
        // Function to count all requests
        public function countAllRequests($requestor_section, $from = null, $to = null, $status = null, $searchQuery = null) {
            $query = "SELECT COUNT(*) as total FROM " . $this->request_table;
            $conditions = [];
            $params = [];
        
            if ($requestor_section !== "Procurement") {
                $conditions[] = "item_section = :item_section";
                $params[':item_section'] = $requestor_section;
            }
        
            if (!empty($from) && !empty($to)) {
                $conditions[] = "created_at BETWEEN :from AND :to";
                $params[':from'] = $from;
                $params[':to'] = $to;
            }
        
            if (!empty($status)) {
                $conditions[] = "item_status = :item_status";
                $params[':item_status'] = $status;
            }
        
            if (!empty($searchQuery)) {
                $conditions[] = "(item_name LIKE :searchQuery OR item_description LIKE :searchQuery)";
                $params[':searchQuery'] = '%' . $searchQuery . '%';
            }
        
            if (!empty($conditions)) {
                $query .= " WHERE " . implode(' AND ', $conditions);
            }
        
            $stmt = $this->conn->prepare($query);
            foreach ($params as $key => $value) {
                $stmt->bindValue($key, $value);
            }
        
            $stmt->execute();
            $result = $stmt->fetch(PDO::FETCH_ASSOC);
            return $result['total'] ?? 0;
        }

        public function fetchAllRequestsByControlNumber($requestor_section, $from = null, $to = null, $status = null, $searchQuery = null, $page = 1, $perPage = 10) {
            $query = "SELECT * FROM " . $this->request_table;
            $conditions = [];
            $params = [];
        
            // Section filter (if not Procurement)
            if ($requestor_section !== "Procurement") {
                $conditions[] = "item_section = :item_section";
                $params[':item_section'] = $requestor_section;
            }
        
            // Date range filter
            if (!empty($from) && !empty($to)) {
                $conditions[] = "created_at BETWEEN :from AND :to";
                $params[':from'] = $from;
                $params[':to'] = $to;
            }
        
            // Status filter
            if (!empty($status)) {
                $conditions[] = "item_status = :item_status";
                $params[':item_status'] = $status;
            }
        
            // Search filter
            if (!empty($searchQuery)) {
                $conditions[] = "(item_name LIKE :searchQuery OR item_description LIKE :searchQuery)";
                $params[':searchQuery'] = '%' . $searchQuery . '%';
            }
        
            // Apply WHERE clause
            if (!empty($conditions)) {
                $query .= " WHERE " . implode(' AND ', $conditions);
            }
        
            // Order by newest first
            $query .= " Group by control_number  ORDER BY created_at DESC";
        
            // Pagination using LIMIT and OFFSET
            $offset = ($page - 1) * $perPage;
            $query .= " LIMIT :limit OFFSET :offset";
        
            // Prepare and bind
            $stmt = $this->conn->prepare($query);
        
            // Bind dynamic parameters
            foreach ($params as $key => $value) {
                $stmt->bindValue($key, $value);
            }
        
            // Bind LIMIT and OFFSET (must be integers)
            $stmt->bindValue(':limit', (int)$perPage, PDO::PARAM_INT);
            $stmt->bindValue(':offset', (int)$offset, PDO::PARAM_INT);
        
            $stmt->execute();
        
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        }
        
        // Function to count all requests
        public function countAllRequestsByControlNumber($requestor_section, $from = null, $to = null, $status = null, $searchQuery = null) {
            $query = "SELECT COUNT(DISTINCT control_number) as total FROM " . $this->request_table;
            $conditions = [];
            $params = [];
        
            if ($requestor_section !== "Procurement") {
                $conditions[] = "item_section = :item_section";
                $params[':item_section'] = $requestor_section;
            }
        
            if (!empty($from) && !empty($to)) {
                $conditions[] = "created_at BETWEEN :from AND :to";
                $params[':from'] = $from;
                $params[':to'] = $to;
            }
        
            if (!empty($status)) {
                $conditions[] = "item_status = :item_status";
                $params[':item_status'] = $status;
            }
        
            if (!empty($searchQuery)) {
                $conditions[] = "(item_name LIKE :searchQuery OR item_description LIKE :searchQuery)";
                $params[':searchQuery'] = '%' . $searchQuery . '%';
            }
        
            if (!empty($conditions)) {
                $query .= " WHERE " . implode(' AND ', $conditions);
            }
        
            $stmt = $this->conn->prepare($query);
            foreach ($params as $key => $value) {
                $stmt->bindValue($key, $value);
            }
        
            $stmt->execute();
            $result = $stmt->fetch(PDO::FETCH_ASSOC);
            return $result['total'] ?? 0;
        }

        public function fetchAllforApprovedByControlNumber($requestor_section, $from = null, $to = null, $status = null, $searchQuery = null, $page = 1, $perPage = 10) {
            $query = "SELECT * FROM " . $this->request_table;
            $conditions = [];
            $params = [];

            $conditions[] = "item_status = 'Pending'";
        
            // Section filter (if not Procurement)
            if ($requestor_section !== "Procurement") {
                $conditions[] = "item_section = :item_section";
                
                $params[':item_section'] = $requestor_section;
            }
        
            // Date range filter
            if (!empty($from) && !empty($to)) {
                $conditions[] = "created_at BETWEEN :from AND :to";
                $params[':from'] = $from;
                $params[':to'] = $to;
            }
        
            // Status filter
            if (!empty($status)) {
                $conditions[] = "item_status = :item_status";
                $params[':item_status'] = $status;
            }
        
            // Search filter
            if (!empty($searchQuery)) {
                $conditions[] = "(item_name LIKE :searchQuery OR item_description LIKE :searchQuery)";
                $params[':searchQuery'] = '%' . $searchQuery . '%';
            }
        
            // Apply WHERE clause
            if (!empty($conditions)) {
                $query .= " WHERE " . implode(' AND ', $conditions);
            }
        
            // Order by newest first
            $query .= " Group by control_number  ORDER BY created_at DESC";
        
            // Pagination using LIMIT and OFFSET
            $offset = ($page - 1) * $perPage;
            $query .= " LIMIT :limit OFFSET :offset";
        
            // Prepare and bind
            $stmt = $this->conn->prepare($query);
        
            // Bind dynamic parameters
            foreach ($params as $key => $value) {
                $stmt->bindValue($key, $value);
            }
        
            // Bind LIMIT and OFFSET (must be integers)
            $stmt->bindValue(':limit', (int)$perPage, PDO::PARAM_INT);
            $stmt->bindValue(':offset', (int)$offset, PDO::PARAM_INT);
        
            $stmt->execute();
        
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        }
        
        // Function to count all requests
        public function countAllforApprovedByControlNumber($requestor_section, $from = null, $to = null, $status = null, $searchQuery = null) {
            $query = "SELECT COUNT(DISTINCT control_number) as total FROM " . $this->request_table;
            $conditions = [];
            $params = [];
        
            if ($requestor_section !== "Procurement") {
                $conditions[] = "item_section = :item_section";
                $conditions[] = "item_status = 'Pending'";
                $params[':item_section'] = $requestor_section;
            }
        
            if (!empty($from) && !empty($to)) {
                $conditions[] = "created_at BETWEEN :from AND :to";
                $params[':from'] = $from;
                $params[':to'] = $to;
            }
        
            if (!empty($status)) {
                $conditions[] = "item_status = :item_status";
                $params[':item_status'] = $status;
            }
        
            if (!empty($searchQuery)) {
                $conditions[] = "(item_name LIKE :searchQuery OR item_description LIKE :searchQuery)";
                $params[':searchQuery'] = '%' . $searchQuery . '%';
            }
        
            if (!empty($conditions)) {
                $query .= " WHERE " . implode(' AND ', $conditions);
            }
        
            $stmt = $this->conn->prepare($query);
            foreach ($params as $key => $value) {
                $stmt->bindValue($key, $value);
            }
        
            $stmt->execute();
            $result = $stmt->fetch(PDO::FETCH_ASSOC);
            return $result['total'] ?? 0;
        }

        // Function to fetch a single request by ID
        public function fetchRequestById($id) {;
            $query = "SELECT * FROM " . $this->request_table . " WHERE control_number = :CONTROL_NUMBER";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':CONTROL_NUMBER', $id); // Use type hinting for safety
            $stmt->execute();
        
            return $stmt->fetchALL(PDO::FETCH_ASSOC);
        }

        //Delete item request
        public function deleteRequest($id) {
            try {
                // Start a transaction
                $this->conn->beginTransaction();
        
                // First delete query
                $query1 = "DELETE FROM " . $this->request_table . " WHERE id = :id";
                $stmt1 = $this->conn->prepare($query1);
                $stmt1->bindParam(':id', $id);
                $stmt1->execute();
        
                // Second delete query
                $query2 = "DELETE FROM " . $this->attachment_table . " WHERE id = :id";
                $stmt2 = $this->conn->prepare($query2);
                $stmt2->bindParam(':id', $id);
                $stmt2->execute();
        
                // If both succeeded
                $this->conn->commit();
                return true;
        
            } catch (PDOException $e) {
                // If something fails, rollback
                $this->conn->rollBack();
                error_log("Delete failed: " . $e->getMessage());
                return false;
            }
        }

        //Edit item request
        public function editItems($data){
            $query = "UPDATE " . $this->request_table . " 
                    SET item_name = :item_name, item_description = :item_description, item_purpose = :item_purpose, item_quantity = :item_quantity, item_uom = :item_uom  
                    WHERE id = :id";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':item_name', $data['item_name']);
            $stmt->bindParam(':item_description', $data['item_description']);
            $stmt->bindParam(':item_purpose', $data['item_purpose']);
            $stmt->bindParam(':item_quantity', $data['item_quantity']);
            $stmt->bindParam(':item_uom', $data['item_unit']);
            $stmt->bindParam(':id', $data['id']);
            if ($stmt->execute()) {
                return true;
            } else {
                return false;
            }
        }

        // Function to retrieve a single attachment by ID
        public function getAttachment($id) {
            $query = "SELECT item_attachment FROM " . $this->attachment_table . " WHERE id = :id";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':id', $id, PDO::PARAM_INT); // Use type hinting for safety
            $stmt->execute();

            $result = $stmt->fetch(PDO::FETCH_ASSOC);
            return $result && isset($result['item_attachment']) ? $result['item_attachment'] : null;
        }

        // Function to update the request status and remarks
        public function UpdateRequestStatus($data) {
            $query = "UPDATE " . $this->request_table . " 
                    SET item_remarks = :item_remarks, item_status = :item_status  
                    WHERE control_number = :control_number";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':item_remarks', $data['item_remarks']);
            $stmt->bindParam(':item_status', $data['requestor_status']);
            $stmt->bindParam(':control_number', $data['control_number']);
            if ($stmt->execute()) {
                return true;
            } else {
                return false;
            }
        }

        // Function to get email sender details based on section
        public function getEmailSenderDetails($section){
            $query = "SELECT emailadd FROM " . $this->email_table . " WHERE department = :section";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':section', $section);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        }

        // Function to get all attachments for a specific control number
        public function getAttachments($control_number) {
            $query = "SELECT item_attachment FROM " . $this->attachment_table . " WHERE control_number = :control_number";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':control_number', $control_number, PDO::PARAM_STR); // Usually control_number is a string
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_COLUMN);
        }

        // Function to send email notification
        public function SendEmailNotification($recipients, $cc, $bcc, $subject, $message, $section, $control_number){

            // Validate recipients
            $mail = new PHPMailer(true);
            try {
                //Server settings
                $mail->SMTPDebug = 0;                                       // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host       = $_ENV['SMTP_HOST'];                     // Set the SMTP server to send through
                $mail->SMTPAuth   = true;                                   // Enable SMTP authentication
                $mail->Username   = $_ENV['SMTP_USERNAME'];                    // SMTP username
                $mail->Password   = $_ENV['SMTP_PASSWORD'];                                     // SMTP password    
                $mail->SMTPSecure = $_ENV['SMTP_SECURE'];         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port       = $_ENV['SMTP_PORT'];                                    // TCP port to connect to
                                                // TCP port to connect to
                //Recipients
                $mail->setFrom($_ENV['FROM_EMAIL'], $_ENV['FROM_NAME']); // Set the sender's email and name
                
                // Add BCC if needed
                foreach ($recipients as $email) {
                    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
                        $mail->addBCC($email); // Add BCC recipient
                    } else {
                        // Handle invalid email address
                        return false;
                    }
                }
                $attachments = $this->getAttachments($control_number);
                foreach ($attachments as $index => $fileData) {
                    if (empty($fileData)) {
                        continue;
                    }
        
                    $finfo = new finfo(FILEINFO_MIME_TYPE);
                    $mimeType = $finfo->buffer($fileData);
        
                    // Assign a default filename since it's not stored in the DB
                    $filename = "attachment_" . ($index + 1) . ".jpeg";  // Change .bin to expected file type if possible
        
                    $mail->addStringAttachment($fileData, $filename, 'base64', $mimeType);
                }

                //Content
                $mail->isHTML(true);                                  // Set email format to HTML
                $mail->Subject = $subject;
                $mail->Body    = $message;
                $mail->AltBody = strip_tags($message);
                $mail->send();

                // Email sent successfully
                return true;

            } catch (Exception $e) {
                // Handle error
                return false;
            }
        }

        // Function to send email status update
        public function SendEmailStatusUpdate($section, $subject, $message) {
            // Get email address of the section
            $emailDetails = $this->getEmailSenderDetails($section);
          
            if (empty($emailDetails)) {
                return false; // No email(s) found
            }
            
            // $emailDetails = ['Sonny.delrosario@nidec-instruments.com.ph', 'sonnyboy.delrosario@nidec.com'];
            // Validate recipients
            $mail = new PHPMailer(true);
            try {
                //Server settings
                $mail->SMTPDebug = 0;                                       // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host       = $_ENV['SMTP_HOST'];                     // Set the SMTP server to send through
                $mail->SMTPAuth   = true;                                   // Enable SMTP authentication
                $mail->Username   = $_ENV['SMTP_USERNAME'];                 // SMTP username
                $mail->Password   = $_ENV['SMTP_PASSWORD'];                 // SMTP password    
                $mail->SMTPSecure = $_ENV['SMTP_SECURE'];                   // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port       = $_ENV['SMTP_PORT'];                     // TCP port to connect to
                                                
                //Recipients
                $mail->setFrom($_ENV['FROM_EMAIL'], $_ENV['FROM_NAME']); // Set the sender's email and name
                
               foreach ($emailDetails as $email) {
                    $emails = $email['emailadd']; // Assuming email is stored in 'emailadd' key
                    if (filter_var($emails, FILTER_VALIDATE_EMAIL)) {
                        $mail->addAddress($emails); // Add recipient
                        $hasvalidEmail = true; // Flag to check if at least one valid email is added
                    } else {
                        error_log("Invalid email skipped: " . $emails);
                    }
                }

                if (!isset($hasvalidEmail)) {
                    return false; // No valid email addresses found
                }

                //Content
                $mail->isHTML(true);                                  // Set email format to HTML
                $mail->Subject = $subject;
                $mail->Body    = $message;
                $mail->AltBody = strip_tags($message);
                $mail->send();

                // Email sent successfully
                return true;

            } catch (Exception $e) {
                // Handle error
                return false;
            }
        }
    }
?>